-- CONTEÚDO ABORDADO NO CURSO:
		-- Funções para agrupar e ordenar saídas de consultas;
		-- Refinamento de consultas através da combinação de funçoões como GROUP BY e HAVING;
		-- Junções de dados de tabelas diferentes através do 'Joins'.


-- MÓDULO 02: CONSULTANDO DADOS DE UMA TABELA

-- AULA 01: CONSULTA SIMPLES DE UMA TABELA
-- FAZENDO UM SELECT NA TABELA DE CLIENTES UTILIZANDO ALIAS 'TDC' EM VEZ DO NOME DA TABELA.
SELECT * FROM [TABELA_DE_CLIENTES] TDC;
SELECT TDC.CPF FROM TABELA_DE_CLIENTES TDC;

-- AULA 02: USANDO O LIKE
-- USANDO O LIKE PARA FAZER UMA CONSULTA QUE APRESENTE TODOS OS NOMES DE PRODUTOS TERMINADOS COM 'LIMAO'.
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR LIKE '%Limao'

-- USANDO O 'LIKE' PARA FAZER UMA CONSULTA QUE APRESENTE TODOS OS PRODUTOS QUE CONTENHAM A PALAVRA 'MACA' NO NOME.
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR LIKE '%Maca%'

-- USANDO O 'LIKE' PARA FAZER UMA CONSULTA QUE APRESENTE TODOS OS NOMES DE PRODUTOS INICIADOS COM 'MORANGO'.
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR LIKE 'Morango%'

-- REALIZANDO UMA CONSULTA UTILIZANDO 'LIKE', FUNÇÕES LÓGICAS E SUBSTITUINDO OS CAMPOS APRESENTADOS POR ALIAS.
SELECT CODIGO_DO_PRODUTO AS ID, NOME_DO_PRODUTO AS NOME, PRECO_DE_LISTA AS PRECO FROM TABELA_DE_PRODUTOS WHERE (SABOR LIKE '%Laranja%') AND (PRECO_DE_LISTA BETWEEN 7.50 AND 17.00)


-- MÓDULO 03: MUDANDO A APRESENTAÇÃO DOS DADOS DE UMA CONSULTA

-- AULA 01: CLÁUSULA DISTINCT NO COMANDO SELECT
-- USANDO SELECT DISTINCT PARA EXIBIR OS TIPOS DE EMBALAGENS UMA ÚNICA VEZ NA TABELA DE PRODUTOS. 
SELECT EMBALAGEM FROM TABELA_DE_PRODUTOS;
SELECT DISTINCT EMBALAGEM FROM TABELA_DE_PRODUTOS;

-- REPETINDO A CONSULTA ANTERIOR MAS AGORA CONSIDERANDO APENAS OS REGISTROS QUE TENHAM MAÇÃ COMO SABOR.
SELECT DISTINCT EMBALAGEM FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Maca';

-- USANDO SELECT DISTINCT PARA EXIBIR UMA ÚNICA VEZ CADA COMBINAÇÃO EXISTENTE ENTRE EMBALAGEM E SABOR.
SELECT DISTINCT EMBALAGEM, SABOR FROM TABELA_DE_PRODUTOS;

-- AULA 03: LIMITANDO A SAÍDA DA CONSULTA
-- REALIZANDO UMA CONSULTA QUE RETORNA OS REGISTROS DAS PRIMEIRAS 10 VENDAS REALIZADAS NO DIA 01/10/2017.
SELECT TOP 10 * FROM NOTAS_FISCAIS WHERE DATA_VENDA = '2017-10-01';

-- AULA 05: ORDENANDO A SAÍDA
-- USANDO O ORDER BY PARA CLASSIFICAR A TABELA DE CLIENTES EM ORDEM CRESCENTE COM BASE NO CAMPO CIDADE E REALIZAR UMA CLASSIFICAÇÃO SECUNDÁRIA EM ORDEM DECRESCENTE COM BASE NO CAMPO BAIRRO.
SELECT * FROM TABELA_DE_CLIENTES ORDER BY ESTADO, BAIRRO DESC;

-- DESCOBRINDO QUAL FOI A MAIOR VENDA DO PRODUTO "Linha Refrescante - 1 Litro - Morango/Limao" EM QUANTIDADE?
SELECT CODIGO_DO_PRODUTO FROM TABELA_DE_PRODUTOS WHERE NOME_DO_PRODUTO = 'Linha Refrescante - 1 Litro - Morango/Limao'

SELECT * FROM ITENS_NOTAS_FISCAIS 
WHERE CODIGO_DO_PRODUTO = '1101035' 
ORDER BY QUANTIDADE DESC;

-- AULA 07: AGRUPANDO LINHAS DE TABELAS
-- CONTANDO E EXIBINDO A QUANTIDADE DE CLIENTES AGRUPANDO POR ESTADO.
SELECT ESTADO, COUNT(*) AS QTD_CLIENTES
FROM TABELA_DE_CLIENTES 
GROUP BY ESTADO;

-- SOMANDO E EXIBINDO O TOTAL DE SUCOS VENDIDOS AGRUPANDO POR SKU E CLASSIFICANDO A EXIBIÇÃO DA MAIOR PARA A MENOR QUANTIDADE DE VENDAS. 
SELECT CODIGO_DO_PRODUTO, SUM(QUANTIDADE) AS 'TOTAL_VENDIDO' 
FROM ITENS_NOTAS_FISCAIS 
GROUP BY CODIGO_DO_PRODUTO 
ORDER BY TOTAL_VENDIDO DESC;

-- CALCULANDO E EXIBINDO A MÉDIA DE PREÇOS DOS PRODUTOS AGRUPADAS POR TIPO DE EMBALAGEM.
SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS 'PRECO_MEDIO' 
FROM TABELA_DE_PRODUTOS 
GROUP BY EMBALAGEM 
ORDER BY PRECO_MEDIO;

-- AULA 08: HAVING PARA FILTRAR CAMPOS AGREGADOS
-- SOMANDO E EXIBINDO O TOTAL DE SUCOS VENDIDOS AGRUPANDO POR SKU E CLASSIFICANDO A EXIBIÇÃO DA MAIOR PARA A MENOR QUANTIDADE DE VENDAS.
-- DESSA VEZ, CONSIDERANDO APENAS SKU'S QUE TIVERAM QUANTIDADE TOTAL VENDIDA SUPERIOR A 390.000 UNIDADES.
SELECT CODIGO_DO_PRODUTO, SUM(QUANTIDADE) AS 'TOTAL_VENDIDO' 
FROM ITENS_NOTAS_FISCAIS 
GROUP BY CODIGO_DO_PRODUTO 
HAVING SUM(QUANTIDADE) > 390000
ORDER BY TOTAL_VENDIDO DESC;


-- MÓDULO 04 - JUNÇÕES, UNIÕES E VISÕES

-- AULA 01: JUNTANDO TABELAS DURANTE A SELEÇÃO
-- CONSULTANDO A QUANTIDADE DE VENDAS REALIZADAS POR VENDEDOR E EXIBINDO O NOME DO FUNCINÁRIO NA CONSULTA.
SELECT NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME, COUNT(*) AS QTD_VENDAS
FROM NOTAS_FISCAIS
INNER JOIN TABELA_DE_VENDEDORES
ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA
GROUP BY NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME;

-- REPETINDO A CONSULTA ANTERIOR MAS AGORA UTILIZANDO ALIAS PARA OS NOMES DAS TABELAS.
SELECT NF.MATRICULA, TV.NOME, COUNT(*) AS QTD_VENDAS
FROM NOTAS_FISCAIS NF
INNER JOIN TABELA_DE_VENDEDORES TV
ON NF.MATRICULA = TV.MATRICULA
GROUP BY NF.MATRICULA, TV.NOME;

-- USANDO O 'INNER JOIN' PARA RETORNAR UMA CONSULTA QUE APRESENTE O NOME DO PRODUTO, SEU CÓDIGO E A QUANTIDADE VENDIDA AGRUPADA POR PRODUTO.
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE 
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO
HAVING SUM(INF.QUANTIDADE) > 394000
ORDER BY SUM(INF.QUANTIDADE) DESC;

-- USANDO 'LEFT JOIN' PARA CONSULTAR QUAIS CLIENTES REALIZARAM COMPRAS.
SELECT DISTINCT NOTAS_FISCAIS.CPF, TABELA_DE_CLIENTES.NOME
FROM NOTAS_FISCAIS
LEFT JOIN TABELA_DE_CLIENTES
ON NOTAS_FISCAIS.CPF = TABELA_DE_CLIENTES.CPF

-- ATRAVÉS DA CONSULTA ANTERIOR É POSSÍVEL OBSERVAR QUE TODOS OS CLIENTES CADASTRADOS JÁ EFETUARAM ALGUMA COMPRA. VAMOS ADICIONAR UM NOVO CLIENTE E, APÓS ISSO, CRIAR UMA CONSULTA SEMELHANTE À ANTERIOR, MAS QUE EXIBA APENAS CLIENTES QUE NÃO EFETUARAM COMPRAS.
-- ADICIONANDO UM  NOVO CLIENTE:
INSERT INTO TABELA_DE_CLIENTES
VALUES ('54663500069','Tiago Cruz','R. Macapa','','Santa Cruz','Rio de Janeiro','RJ','24620660','1997-02-18','21','F','3000','11000','0');
-- USANDO 'RIGHT JOIN'PARA EXIBIR APENAS OS CLIENTES QUE NÃO EFETUARAM COMPRAS.
SELECT DISTINCT NF.CPF, TC.NOME
FROM NOTAS_FISCAIS NF
RIGHT JOIN TABELA_DE_CLIENTES TC
ON NF.CPF = TC.CPF
WHERE NF.CPF IS NULL



-- OUTROS EXERCÍCIOS:

-- UTILIZANDO 'UNION' PARA UNIR VALORES DE DUAS TABELAS DIFERTENTES.
SELECT 
MATRICULA AS MATRICULA_CPF,
NOME,
BAIRRO
FROM TABELA_DE_VENDEDORES
UNION
SELECT
CPF,
NOME,
BAIRRO
FROM TABELA_DE_CLIENTES

-- UTILIZANDO 'UNION' PARA UNIR OS VALORES DAS COLUNAS 'BAIRRO' NAS TABELAS DE VENDEDORES E DE CLIENTES.
SELECT
BAIRRO
FROM TABELA_DE_VENDEDORES
UNION
SELECT
BAIRRO
FROM TABELA_DE_CLIENTES

-- UTILIZANDO 'UNION ALL' PARA UNIR OS VALORES DAS COLUNAS 'BAIRRO' NAS TABELAS DE VENDEDORES E DE CLIENTES.
SELECT
BAIRRO
FROM TABELA_DE_VENDEDORES
UNION ALL
SELECT
BAIRRO
FROM TABELA_DE_CLIENTES

-- NOTA: COMO É POSSÍVEL PERCEBER ATRAVÉS DOS RESULTADOS DAS CONSULTAS ACIMA, AO SE UTILIZAR 'UNION' A JUNÇÃO DOS VALORES DAS DUAS TABELAS RETORNA APENAS VALORES DISTINTOS. JÁ O 'UNION ALL' RETORNA TODOS OS REGISTROS CONTIDOS NAS DUAS TABELAS DE ORIGEM, PORTANTO CONTEMPLA VALORES REPETIDOS.

-- UTILIZANDO A CLÁUSULA 'CASE WHEN' PARA CLASSIFICAR OS PRODUTOS EM FUNÇÃO DE SEUS PREÇOS.
SELECT NOME_DO_PRODUTO, PRECO_DE_LISTA,
(CASE WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
      WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
      ELSE 'PRODUTO BARATO'
      END) AS CLASSIFICACAO
FROM TABELA_DE_PRODUTOS
ORDER BY CLASSIFICACAO

-- UTILIZANDO O GROUP BY PARA SABER AS RESPECTIVAS QUANTIDADES DE PRODUTOS CLASSIFICADOS COMO 'BARATO', 'EM CONTA' E 'CARO'.
SELECT
(CASE WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
      WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
      ELSE 'PRODUTO BARATO'
      END) AS CLASSIFICACAO, COUNT(*) AS QTD_TIPO_PRODUTO
FROM TABELA_DE_PRODUTOS
GROUP BY 
(CASE WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
      WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
      ELSE 'PRODUTO BARATO'
      END)
ORDER BY QTD_TIPO_PRODUTO

